#!/usr/bin/env python3

import sys
import sh
from vdtui import *

__version__ = 'saul.pw/vgit v0.1'

option('vgit_show_ignored', False)
option('diff_algorithm', 'minimal')

command('x', 'i = input("git ", type="git"); vd.push(TextSheet(i, sh.git(*i.split()).split("\\n")))', 'execute arbitrary git command')
command('B', 'vd.push(GitBranches())', 'execute arbitrary git command')
command('O', 'vd.push(GitOptions())', 'push sheet of git options')
command('P', 'git("push")', 'git push')
command('A', 'git("merge", "--abort")', 'abort merge')

command('1', 'vd.push(GitStashes())', '')
command('^S', 'sh.git("stash", "save")', 'stash uncommitted changes')
command('^P', 'sh.git("stash", "pop")', 'apply the most recent stashed change and drop it')


class GitSheet(Sheet):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.extra_args = []
        self.branch = ''

    def git(self, *args, **kwargs):
        args = list(args) + self.extra_args
        self.extra_args.clear()

        try:
            ret = sh.git('--no-pager', *args, _err_to_out=True, **kwargs)
            out = ret.stdout
        except sh.ErrorReturnCode as e:
            status('retcode=%s' % e.exit_code)
            out = e.stdout

        self.reload()

        out = out.decode('utf-8')
        if len(out.splitlines()) > 2:
            vd().push(TextSheet('git_%s' % args[0], out))
        else:
            status(out)

    def leftStatus(self):
        return ('‹%s› ' % self.branch) + super().leftStatus()

    def reload(self):
        self.branch = sh.git('rev-parse', '--abbrev-ref', 'HEAD').strip()



class GitStashes(GitSheet):
    def __init__(self):
        super().__init__('stashes')
        self.columns = [
            ColumnItem('stashid', 0),
            ColumnItem('start_branch', 1),
            ColumnItem('sha1', 2),
            ColumnItem('msg', 3),
        ]
        self.command('^A', 'git("stash", "apply", cursorRow[0])', 'apply this stashed change without removing')
        self.command(')', 'git("stash", "pop", cursorRow[0])', 'apply this stashed change and drop it')
        self.command('d', 'git("stash", "drop", cursorRow[0])', 'drop this stashed change')
        self.command('b', 'git("stash", "branch", input("create branch from stash named: "), cursorRow[0])', 'create branch from stash')
        self.command(ENTER, 'vd.push(HunksSheet("--no-pager", "stash", "show", "--no-color", cursorRow[0]))', 'show this stashed change')


    def reload(self):
        self.rows = []
        stashout = sh.git('--no-pager', 'stash', 'list')
        for line in stashout:
            stashid, ctx, rest = line[:-1].split(': ', 2)
            starting_branch = ctx[len('WIP on '):]
            sha1, msg = rest.split(' ', 1)
            self.rows.append([stashid, starting_branch, sha1, msg])

class GitBranches(GitSheet):
    def __init__(self):
        super().__init__('branches')
        self.columns = [
            Column('branch')
        ]

        self.command('a', 'git("checkout", "-b", input("create branch: ", type="branch"))', 'create a new branch off the current checkout')
        self.command('d', 'git("branch", "--delete", cursorRow)', 'delete this branch')
        self.command('e', 'git("branch", "-v", "--move", cursorRow, editCell(0))', 'rename this branch')
        self.command([ENTER, 'c'], 'git("checkout", cursorRow)', 'checkout this branch')
        self.command('m', 'git("merge", cursorRow)', 'merge this branch into the current branch')

    def reload(self):
        super().reload()
        self.rows = []
        for line in sh.git('--no-pager', 'branch', '--no-color',
#                '--all',  # local and remote branches
                '--list').splitlines():
            self.rows.append(line[2:])


class GitFile:
    def __init__(self, f, gitsrc):
        self.path = f if isinstance(f, Path) else Path(f)
        self.filename = self.path.relpath(str(gitsrc) + '/')
        self.is_dir = self.path.is_dir()

    def __str__(self):
        return self.filename + (self.is_dir and '/' or '')


class GitStatus(GitSheet):
    def __init__(self, p):
        super().__init__(p.relpath(''), p)

        self.columns = [Column('path', getter=lambda r,s=self: str(r)),
                      Column('status', getter=lambda r,s=self: s.statusText(s.git_status(r)), width=8),
                      Column('staged', getter=lambda r,s=self: s.git_status(r)[2]),
                      Column('unstaged', getter=lambda r,s=self: s.git_status(r)[1]),
                      Column('type', getter=lambda r: r.is_dir and '/' or r.path.suffix, width=0),
                      Column('size', type=int, getter=lambda r: r.path.filesize),
                      Column('mtime', type=date, getter=lambda r: r.path.stat().st_mtime),
                    ]

        self.addColorizer('row', 3, GitStatus.rowColor)
        self.addColorizer('row', 6, lambda s,c,r,v: 'red underline' if 'U' in s.git_status(r)[0] else None)

        self.command('f', 'sheet.extra_args.append("-f")', 'force next action with "-f"')

        self.command('a', 'git("add", cursorRow.filename)', 'add this new file or modified file to staging')
        self.command('m', 'git("mv", cursorRow.filename, input("rename file to: ", value=cursorRow.filename))', 'rename this file')
        self.command('d', 'git("rm", cursorRow.filename)', 'stage this file for deletion')
        self.command('w', 'git("reset", "HEAD", cursorRow.filename)', 'unstage this file')
        self.command('c', 'git("checkout", cursorRow.filename)', 'checkout this file')
        self.command('ga', 'git("add", *[r.filename for r in selectedRows])', 'add all selected files to staging')
        self.command('gd', 'git("rm", *[r.filename for r in selectedRows])', 'delete all selected files')
        self.command(['^S', 'C'], 'git("commit", "-m", input("commit message: "))', 'commit changes')
        self.command('V', 'vd.push(TextSheet(cursorRow.filename, Path(cursorRow.filename)))', 'open file')
        self.command('i', 'open(workdir+"/.gitignore", "a").write(cursorRow.filename+"\\n")', 'add file to toplevel .gitignore')
        self.command('gi', 'open(workdir+"/.gitignore", "a").write(input("add wildcard to .gitignore: "))', 'add input line to toplevel .gitignore')  # path, filename

        self.command(ENTER, 'vd.push(getHunksSheet(cursorRow))', 'push sheet of diffs for this file')

        self.command('g/', 'vd.push(GitGrep(input("git grep: ")))', 'find in all files')
#
        self._cachedStatus = {}

    def statusText(self, st):
        vmod = {'A': 'add', 'D': 'rm', 'M': 'mod', 'T': 'chmod', '?': 'out', '!': 'ignored', 'U': 'unmerged'}
        x, y = st[0]
        if st == '??': # untracked
            return 'new'
        elif st == '!!':  # ignored
            return 'ignored'
        elif x != ' ' and y == ' ': # staged
            return vmod.get(x, x)
        elif y != ' ': # unstaged
            return vmod.get(y, y)
        else:
            return ''

    @property
    def workdir(self):
        return str(self.source)

    def rowColor(self, c, row, v):
        st = self.git_status(row)[0]
        x, y = st
        if st == '??': # untracked
            return 'yellow'
        elif st == '!!':  # ignored
            return '237 blue'
        elif x in 'AMD' and y == ' ': # staged add/mod/rm
            return 'green'
        elif y in 'AMD': # unstaged add/mod/rm
            return 'red'

        return 'white'

    def git_status(self, r):
        return self._cachedStatus.get(r.filename, ["//", None, None])

    def ignored(self, fn):
        if options.vgit_show_ignored:
            return False

        if fn in self._cachedStatus:
            return self._cachedStatus[fn][0] == '!!'

        return False

    def reload(self):
        super().reload()
        files = [GitFile(p, self.source) for p in self.source.iterdir() if p.name not in ('.git', '..')]  # files in working dir

        filenames = dict((gf.filename, gf) for gf in files)

        self.rows = []
        self._cachedStatus.clear()
        for fn in sh.git('ls-files', '-z').split('\0'):
            self._cachedStatus[fn] = ['  ', None, None]  # status, adds, dels

        for status_line in sh.git('status', '-z', '-unormal', '--ignored').split('\0'):
            if status_line:
                st = status_line[:2]
                gf = GitFile(status_line[3:], self.source)
                self._cachedStatus[gf.filename] = [st, None, None]
                if gf.filename not in filenames:
                    if not self.ignored(gf.filename):
                        self.rows.append(gf)

        for line in sh.git('diff-files', '--numstat', '-z').split('\0'):
            if not line: continue
            adds, dels, fn = line.split('\t')
            if fn not in self._cachedStatus:
                self._cachedStatus[fn] = ['##', None, None]
            cs = self._cachedStatus[fn]
            cs[1] = '+%s/-%s' % (adds, dels)

        for line in sh.git('diff-index', '--cached', '--numstat', '-z', 'HEAD').split('\0'):
            if not line: continue
            adds, dels, fn = line.split('\t')
            if fn not in self._cachedStatus:
                self._cachedStatus[fn] = ['$$', None, None]
            cs = self._cachedStatus[fn]
            cs[2] = '+%s/-%s' % (adds, dels)

        self.rows.extend(gf for fn, gf in filenames.items() if not self.ignored(gf.filename))

        self.rows.sort(key=lambda r,col=self.columns[-1]: col.getValue(r), reverse=True)  # sort by -mtime

        self.recalc()  # erase column caches

def getHunksSheet(*files):
    return HunksSheet('hunks', list('--no-pager', 'diff',
                  '--diff-algorithm=' + options.diff_algorithm,
                  '--patch',
                  '--no-color',
                  '--no-prefix', *[gf.filename for gf in files]))


# source is arguments to git()
class HunksSheet(GitSheet):
    def __init__(self, *git_args):
        super().__init__('hunks', git_args)
        self.columns = [
            ColumnItem('origfn', 0, width=0),
            ColumnItem('filename', 1),
            ColumnItem('context', 2),
            ColumnItem('leftlinenum', 3),
            ColumnItem('leftcount', 4),
            ColumnItem('rightlinenum', 5),
            ColumnItem('rightcount', 6),
        ]

        self.command(ENTER, 'vd.push(HunkViewer(sheet, cursorRow))', 'view the diff for this hunk')
        self.command('g^J', 'vd.push(HunkViewer(sheet, *(selectedRows or rows)))', 'view the diffs for the selected hunks')
        self.command('V', 'vd.push(TextSheet("diff", "\\n".join(cursorRow[7])))', 'view the entire raw patch')
        self.command('a', 'apply(cursorRow)', 'apply this hunk to the index')

    def apply(self, hunk):
        self.git("apply", "--cached", "-p0", "-", _in="\n".join(hunk[7]) + "\n")
        status('applied hunk (lines %s-%s)' % (hunk[3], hunk[3]+hunk[4]))

    def reload(self):
        super().reload()

        diffout = sh.git(*self.source)

        self.rows = []
        leftfn = ''
        rightfn = ''
        header_lines = None
        for line in diffout.splitlines():
            if line.startswith('---'):
                header_lines = [line]  # new file
                leftfn = line[4:]
            elif line.startswith('+++'):
                header_lines.append(line)
                rightfn = line[4:]
            elif line.startswith('@@'):
                header_lines.append(line)
                _, linenums, context = line.split('@@')
                leftlinenums, rightlinenums = linenums.split()
                leftstart, leftcount = leftlinenums[1:].split(',')
                rightstart, rightcount = rightlinenums[1:].split(',')
                self.rows.append((leftfn, rightfn, context, int(leftstart), int(leftcount), int(rightstart), int(rightcount), header_lines))
                header_lines = header_lines[:2]  # keep file context
            elif line[0] in ' +-':
                self.rows[-1][-1].append(line)


class HunkViewer(GitSheet):
    def __init__(self, srchunks, *hunks):
        super().__init__('hunk', *hunks)
        self.srchunks = srchunks
        self.columns = [
            ColumnItem('left', 1, width=vd().windowWidth//2-1),
            ColumnItem('right', 2, width=vd().windowWidth//2-1),
        ]
        self.addColorizer('row', 4, HunkViewer.colorDiffRow)
        self.command('a', 'srchunks.apply(sources.pop(0)); reload()', 'apply this hunk to the index and move to the next hunk')
        self.command(ENTER, 'sources.pop(0); reload()', 'move to the next hunk without applying this hunk')
        self.command('d', 'source[7].pop(cursorRow[3]); reload()', 'delete a line from the patch')

    def reload(self):
        super().reload()
        if not self.sources:
            self.vd.remove(self)
            return

        fn, _, context, linenum, _, _, _, patchlines = self.source
        self.name = '%s:%s' % (fn, linenum)
        self.rows = []
        nextDelIdx = None
        for line in patchlines[3:]:  # diff without the patch headers
            typech = line[0]
            line = line[1:]
            if typech == '-':
                self.rows.append([typech, line, None])
                if nextDelIdx is None:
                    nextDelIdx = len(self.rows)-1
            elif typech == '+':
                if nextDelIdx is not None:
                    if nextDelIdx < len(self.rows):
                        self.rows[nextDelIdx][2] = line
                        nextDelIdx += 1
                        continue

                self.rows.append([typech, None, line])
                nextDelIdx = None
            elif typech == ' ':
                self.rows.append([typech, line, line])
                nextDelIdx = None
            else:
                continue  # header

    def colorDiffRow(self, c, row, v):
        if row[1] != row[2]:
            if row[1] is None:
                return 'green'  # addition
            elif row[2] is None:
                return 'red'  # deletion
            else:
                return 'yellow'  # difference


class GitGrep(GitSheet):
    def __init__(self, regex):
        super().__init__(regex, regex, columns=[
            ColumnItem('filename', 0),
            ColumnItem('linenum', 1),
            ColumnItem('line', 2),
        ])
        self.command(ENTER, 'vd.push(openSource(cursorRow[0], filetype="txt")).cursorRowIndex = int(cursorRow[1])-1', 'go to this match')

    def reload(self):
        self.rows = []
        for line in sh.git('--no-pager', 'grep', '--no-color', '-z',
                '--line-number',
                '--ignore-case',
                self.source).splitlines():
            self.rows.append((line.split('\0')))


class GitOptions(GitSheet):
    CONFIG_CONTEXTS = ('local', 'local', 'global', 'system')
    def __init__(self):
        super().__init__('git config')
        self.columns = [Column('option', getter=lambda r: r[0])]
        for i, ctx in enumerate(self.CONFIG_CONTEXTS[1:]):
            self.columns.append(Column(ctx, getter=lambda r, i=i: r[1][i], setter=self.config_setter(ctx)))

        self.nKeys = 1

        self.command('d', 'git("config", "--unset", "--"+CONFIG_CONTEXTS[cursorColIndex], cursorRow[0])', 'unset this config value')
        self.command('gd', 'for r in selectedRows: git("config", "--unset", "--"+CONFIG_CONTEXTS[cursorColIndex], r[0])', 'unset this config value')
        self.command('e', 'i=(cursorVisibleColIndex or 1); visibleCols[i].setValues([cursorRow], editCell(i)); sheet.cursorRowIndex += 1', 'edit this option')
        self.command('ge', 'i=(cursorVisibleColIndex or 1); visibleCols[i].setValues(selectedRows, input("set selected to: ", value=cursorValue))', 'edit this option for all selected rows')
        self.command('a', 'git("config", "--add", "--"+CONFIG_CONTEXTS[cursorColIndex], input("option to add: "), "added")', 'add new option')

    def config_setter(self, ctx):
        def setter(r, v):
            self.git('config', '--'+ctx, r[0], v)
        return setter

    def reload(self):
        super().reload()
        opts = {}
        for i, ctx in enumerate(self.CONFIG_CONTEXTS[1:]):
            try:
                for line in sh.git('config', '--list', '--'+ctx, '-z').split('\0'):
                    if line:
                        k, v = line.splitlines()
                        if k not in opts:
                            opts[k] = [None, None, None]
                        opts[k][i] = v
            except:
                pass # exceptionCaught()

        self.rows = sorted(list(opts.items()))


def main():
    options.textwrap = False

    status(__version__)

    addGlobals(globals())

    fn = sys.argv[1] if sys.argv[1:] else '.'
    os.chdir(fn)

    run([GitStatus(Path('.'))])


main()
