#!/usr/bin/env python3

#  how to detect and colors:
#    files changed in index
#    changes not staged for commit
#    untracked files

import sys
import sh
from visidata import *

option('color_git_unmodified', 'yellow')
option('color_git_add_staged', 'green')
option('color_git_wt_new', 'cyan')
option('color_git_mod_unstaged', 'brown')

def open_git(p):
    return GitStatus(p)

class GitStatus(Sheet):
    def __init__(self, p):
        super().__init__(p.relpath(''), p)

        self.columns = [Column('filename', str, lambda r,s=self: s.rel(r)),
                      Column('status', anytype, lambda r,s=self: s.status_text(s._cachedStatus[s.rel(r)])),
                      Column('type', str, lambda r: r.is_dir() and '/' or r.suffix),
                      Column('size', int, lambda r: r.filesize),
                      Column('mtime', date, lambda r: r.stat().st_mtime)]

        self.addColorizer('row', 3, GitStatus.fileColorizer)

        self.command('a', 'git("add", rel(cursorRow))', 'add new file or file modifications to staging/index')
        self.command('d', 'git("rm", rel(cursorRow))', 'stage this file for deletion')
#        self.command('w', 'git("rm", "--cached", rel(cursorRow))', 'unstage this file')
        self.command('w', 'git("reset", "HEAD", rel(cursorRow))', 'unstage this file')
        self.command('c', 'git("checkout", rel(cursorRow))', 'checkout this file')
#        self.command('ga', 'repo.index.add_all([rel(r) for r in self.selectedRows])', 'add all selected files to index')
#        self.command('gd', '[repo.index.remove(rel(r)) for r in self.selectedRows if rel(r) in repo.index]', 'delete all selected files from index')
        self.command('^S', 'git("commit", "-m", input("commit message: "))', 'commit changes')
        self.command(ENTER, 'vd.push(openSource(rel(cursorRow)))', 'open file')  # path, filename
#        self.command('i', 'open(repo.workdir + "/.gitignore", "a").write(rel(cursorRow)+"\\n")', 'add file to toplevel .gitignore')  # path, filename
#        self.command('gi', 'open(repo.workdir + "/.gitignore", "a").write(input("add to .gitignore"))', 'add input line to toplevel .gitignore')  # path, filename
#        self.command('m', 'os.rename(rel(cursorRow), input("rename file to: ", value=rel(cursorRow)))', 'rename this file')
#
        self._cachedStatus = {}

    def status_text(self, st):
        vmod = {'A': 'add', 'D': 'rm', 'M': 'mod', 'T': 'type'}
        x, y = st
        if x != ' ' and y == ' ': # staged
            return vmod.get(x, '') # + ' staged'
        elif x == ' ' and y != ' ': # unstaged
            return vmod[y] + '*'
        elif st == '??': # untracked
            return 'new'
        elif st == '!!':  # ignored
            return 'ignored'
        else:
            return ''
    @staticmethod
    def fileColorizer(self, c, row, v):
        st = self.git_status(row)
        x, y = st
        if x in 'AMD' and y == ' ': # staged add/mod/rm
            return 'green'
        elif y in 'AMD': # unstaged add/mod/rm
            return 'red'
        elif st == '??': # untracked
            return 'yellow'
        elif self.git_status(row) == '!!':  # ignored
            return 'blue bold'

        return 'white'

    def git(self, *args, **kwargs):
        status(*args)
        status(sh.git(*args, **kwargs))
        self.reload()

    def git_status(self, r):
        return self._cachedStatus.get(self.rel(r), ',,')

    def rel(self, r):
        return r.relpath(str(self.source) + '/')

    def reload(self):
        filenames = dict((self.rel(p), Path(self.rel(p))) for p in self.source.iterdir() if p.name not in ('.git', '..'))  # files in working dir
        self.rows = [p for k, p in filenames.items()]
        self._cachedStatus.clear()
        for fn in sh.git('ls-files', '-z').split('\0'):
            self._cachedStatus[fn] = '  '

        for status_line in sh.git('status', '-z', '-unormal', '--ignored').split('\0'):
            if status_line:
                st = status_line[:2]
                fn = self.rel(Path(status_line[3:]))
                if fn not in filenames:
                    self.rows.append(Path(fn))
                self._cachedStatus[fn] = st

        self.recalc()
        self.rows.sort(key=lambda r,col=self.columns[-1]: col.getValue(r), reverse=True)


vd().status('saul.pw/vgit v0.0.1')

fn = sys.argv[1] if sys.argv[1:] else '.'
os.chdir(fn)
run([GitStatus(Path('.'))])
