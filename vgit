#!/usr/bin/env python3

#  how to detect and colors:
#    files changed in index
#    changes not staged for commit
#    untracked files

from visidata import *
import sh

option('color_git_nonindex', 'yellow')
option('color_git_index_new', 'green')
option('color_git_wt_new', 'cyan')

def open_git(p):
    return GitStatus(p)

class VisiGit:
    def rightStatus(self, vs):
        pass

def ToEnum(d, start):
    return dict((d[k], k[len(start):]) for k in d if k.startswith(start))

class GitStatus(Sheet):
    GIT_STATUSES = { 0: '',
            1: 'add',
            2: 'mod',
            4: 'rm',
            8: 'mv',
            16: 'chmod',
            128: 'unstaged_add',
            256: 'unstaged_mod',
            512: 'unstaged_rm',
            1024: 'unstaged_chmod',
            2048: 'unstaged_mv',
            4096: 'unreadable',
            16384: 'ignored',
    }
    def __init__(self, p):
        super().__init__(p.resolve(), p)

        self.columns = [Column('filename', str, lambda r,s=self: s.rel(r)),
                      Column('status', anytype, lambda r,s=self: s._cachedStatus[s.rel(r)]),
                      Column('type', str, lambda r: r.is_dir() and '/' or r.suffix),
                      Column('size', int, lambda r: r.filesize),
                      Column('mtime', date, lambda r: r.stat().st_mtime)]

#        self.addColorizer('row', 3, GitStatus.fileColorizer)

        self.command('a', 'repo.index.add(rel(cursorRow))', 'add file to index')
        self.command('ga', 'repo.index.add_all([rel(r) for r in self.selectedRows])', 'add all selected files to index')
        self.command('d', 'repo.index.remove(rel(cursorRow)) if rel(cursorRow) in repo.index else status("not in index")', 'delete this file from index')
        self.command('gd', '[repo.index.remove(rel(r)) for r in self.selectedRows if rel(r) in repo.index]', 'delete all selected files from index')
        self.command('^S', 'repo.index.write()', 'commit changes to index')
        self.command(ENTER, 'vd.push(openSource(rel(cursorRow)))', 'open file')  # path, filename
        self.command('i', 'open(repo.workdir + "/.gitignore", "a").write(rel(cursorRow)+"\\n")', 'add file to toplevel .gitignore')  # path, filename
        self.command('gi', 'open(repo.workdir + "/.gitignore", "a").write(input("add to .gitignore"))', 'add input line to toplevel .gitignore')  # path, filename
        self.command('m', 'os.rename(rel(cursorRow), input("rename file to: ", value=rel(cursorRow)))', 'rename this file')

        self._cachedStatus = {}

    @staticmethod
    def fileColorizer(self, c, row, v):
        if self.git_status(row) == 'INDEX_NEW':
            return options.color_git_index_new
        elif self.git_status(row) == 'WT_NEW':
            return options.color_git_wt_new
        elif self.rel(row) not in self.repo.index:
            return options.color_git_nonindex

    def git_status(self, pathrow):
        relfn = pathrow.relpath(self.repo.workdir)
        if pathrow.is_dir():
            relfn += '/'
        st = self.repo.status_file(relfn)
        if st is None:
            return 'no'

        strstatus = ' '.join(v for k, v in self.GIT_STATUSES.items() if st & k)
        if not strstatus:
            strstatus = str(st)
        return strstatus

    def rel(self, r):
        return r.relpath(str(self.source) + '/')

    def reload(self):
        filenames = dict((self.rel(p), Path(self.rel(p))) for p in self.source.iterdir() if p.name not in ('.git', '..'))  # files in working dir
        self.rows = [p for k, p in filenames.items()]
        self._cachedStatus.clear()
        for fn in sh.git('ls-files', '-z').split('\0'):
            self._cachedStatus[fn] = '**'

        for status_line in sh.git('status', '-z', '-unormal', '--ignored').split('\0'):
            if status_line:
                st = status_line[:2]
                fn = self.rel(Path(status_line[3:]))
                if fn not in filenames:
                    self.rows.append(Path(fn))
                self._cachedStatus[fn] = st

vd().status('saul.pw/vgit v0.1')
run([GitStatus(Path('.'))])
