#!/usr/bin/env python3

import os.path
import sys
from visidata import Sheet, Column, ColumnAttr, run, status, Command, Path, ENTER, asyncthread
from visidata import namedlist, date, vlen, option, getGlobals, loadConfigFile, options
import vgit

__version__ = 'v0.4-dev'
__version_info__ = 'saul.pw/vgit ' + __version__


option('config', '~/.vgitrc', 'config file to exec in Python')


GitRepo = namedlist('GitRepo', 'path stashes cached changes'.split())


class GitLinesColumn(Column):
    def __init__(self, name, cmd, *args, **kwargs):
        super().__init__(name, cache=True, **kwargs)
        cmdparts = cmd.split()
        if cmdparts[0] == 'git':
            cmdparts = cmdparts[1:]
        self.cmd = cmdparts + list(args)

    def calcValue(self, r):
        return list(vgit.git_lines('--git-dir', r.path.joinpath('.git').abspath(), *self.cmd))


class GitAllColumn(GitLinesColumn):
    def calcValue(self, r):
        return vgit.git_all('--git-dir', r.path.joinpath('.git').abspath(), *self.cmd).strip()


class GitOverview(Sheet):
    rowtype = 'repos'  # rowdef: GitRepo
    columns = [
        ColumnAttr('repo', 'path', type=str),
        GitLinesColumn('stashes', 'git stash list', type=vlen),
        GitLinesColumn('cached', 'git diff --cached', type=vlen),
        GitLinesColumn('branches', 'git branch --no-color', type=vlen),
        GitAllColumn('branch', 'git rev-parse --abbrev-ref HEAD'),
        Column('modtime', type=date, getter=lambda c,r: r.path.stat().st_mtime),
    ]
    nKeys = 1

    @asyncthread
    def reload(self):
        import glob
        self.rows = []
        for fn in glob.glob(os.path.join('**', '.git/'), recursive=True):
            if fn == '.git/':
                path = Path('.')
            else:
                path = Path(fn).parent.parent
            self.addRow(GitRepo([path]))

GitOverview.addCommand(ENTER, 'dive-row', 'vd.push(open_git(Path(cursorRow.path.abspath())))')
GitOverview.addCommand('z'+ENTER, 'dive-cell', 'view(cursorValue)')


def open_git(p):
    p.joinpath('.git').is_dir() or error('not a git repo')
    vs = vgit.GitStatus(p)
    vs.gitBranchesSheet = vgit.GitBranches('branches', source=vs)
    vs.gitOptionsSheet = vgit.GitOptions('git-options', source=vs)
    vs.gitStashesSheet = vgit.GitStashes('stashes', source=vs)
    vs.gitRemotesSheet = vgit.GitRemotes('remotes', source=vs)
    return vs


def main():
    loadConfigFile(Path(options.config).resolve(), getGlobals())

    if len(sys.argv) > 1:
        topdir = Path(sys.argv[1])
    else:
        topdir = Path('.')

    if topdir.joinpath('.git').is_dir():
        vs = open_git(topdir)
    else:
        vs = GitOverview('gitrepos', source=topdir)

    run(vs)


if __name__ == '__main__':
    status(__version_info__)
    rc = main()
    sys.exit(rc)
